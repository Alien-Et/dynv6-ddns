name: CI and Release

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*" # 触发 Release 的 tag 格式，例如 v1.0.0
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [amd64, arm64]
        exclude:
          # macOS 不支持 arm64 上的 Windows 构建，排除此组合
          - os: windows-latest
            arch: arm64
      fail-fast: false

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 设置 Go 环境
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21' # 根据你的项目要求调整 Go 版本

      # 缓存 Go 模块
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # 安装依赖
      - name: Install dependencies
        run: go mod tidy

      # 运行代码格式化检查
      - name: Run gofmt
        run: |
          if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted with gofmt. Run 'gofmt -w .' to fix."
            gofmt -l .
            exit 1
          fi
        if: matrix.os == 'ubuntu-latest' # 只在 Ubuntu 上运行格式化检查

      # 运行静态检查（可选）
      - name: Run staticcheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...
        if: matrix.os == 'ubuntu-latest' # 只在 Ubuntu 上运行静态检查

      # 运行测试（如果有测试用例）
      - name: Run tests
        run: go test -v ./...
        env:
          GOARCH: ${{ matrix.arch }}

      # 编译二进制文件
      - name: Build binary
        run: |
          GOOS=${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'windows-latest' && 'windows' || 'darwin' }} \
          GOARCH=${{ matrix.arch }} \
          go build -o dynv6-ddns-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows-latest' && '.exe' || '' }} \
          -ldflags "-X main.version=${{ github.ref_name }}"
        env:
          CGO_ENABLED: 0 # 禁用 CGO 以生成静态二进制文件

      # 上传构建产物（仅用于调试）
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dynv6-ddns-${{ matrix.os }}-${{ matrix.arch }}
          path: dynv6-ddns-${{ matrix.os }}-${{ matrix.arch }}*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') # 仅在推送 tag 时运行
    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 下载所有构建产物
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 创建 Release 并上传二进制文件
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/dynv6-ddns-ubuntu-latest-amd64/dynv6-ddns-ubuntu-latest-amd64
            artifacts/dynv6-ddns-ubuntu-latest-arm64/dynv6-ddns-ubuntu-latest-arm64
            artifacts/dynv6-ddns-windows-latest-amd64/dynv6-ddns-windows-latest-amd64.exe
            artifacts/dynv6-ddns-macos-latest-amd64/dynv6-ddns-macos-latest-amd64
            artifacts/dynv6-ddns-macos-latest-arm64/dynv6-ddns-macos-latest-arm64
          draft: false
          prerelease: false
          body: |
            Release ${{ github.ref_name }}
            - Built for Linux (amd64, arm64), Windows (amd64), and macOS (amd64, arm64)
            - See [README.md](README.md) for installation and usage instructions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}