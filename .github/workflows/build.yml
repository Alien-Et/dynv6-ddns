name: Build and Release Dynv6 Updater

# 触发工作流的事件
on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*' # 触发 Release 的标签格式，例如 v1.0.0
  pull_request:
    branches:
      - main

# 环境变量
env:
  GO_VERSION: '1.21' # 指定 Go 版本
  BINARY_NAME: dynv6 # 二进制文件名

jobs:
  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}

    # 定义编译矩阵，覆盖多平台和架构
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [amd64, arm64]
        include:
          # Android 手机：ARMv7 和 ARM64
          - os: ubuntu-latest
            arch: arm
            goos: linux
            goarch: arm
            goarm: 7
            suffix: linux-armv7-android
          - os: ubuntu-latest
            arch: arm64
            goos: linux
            goarch: arm64
            suffix: linux-arm64-android
          # 路由器：ARMv7 和 MIPS
          - os: ubuntu-latest
            arch: arm
            goos: linux
            goarch: arm
            goarm: 7
            suffix: linux-armv7-router
          - os: ubuntu-latest
            arch: mips
            goos: linux
            goarch: mips
            suffix: linux-mips-router
          # 其他平台
          - os: ubuntu-latest
            arch: amd64
            goos: linux
            goarch: amd64
            suffix: linux-amd64
          - os: ubuntu-latest
            arch: arm64
            goos: linux
            goarch: arm64
            suffix: linux-arm64
          - os: windows-latest
            arch: amd64
            goos: windows
            goarch: amd64
            suffix: windows-amd64
            ext: .exe
          - os: windows-latest
            arch: arm64
            goos: windows
            goarch: arm64
            suffix: windows-arm64
            ext: .exe
          - os: macos-latest
            arch: amd64
            goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - os: macos-latest
            arch: arm64
            goos: darwin
            goarch: arm64
            suffix: darwin-arm64

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 设置 Go 环境
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      # 缓存 Go 模块
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.mod', '**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # 编译二进制文件
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
          CGO_ENABLED: 0 # 禁用 CGO 以确保静态链接
        run: |
          go build -o ${{ env.BINARY_NAME }}-${{ matrix.suffix }}${{ matrix.ext }} main.go
          chmod +x ${{ env.BINARY_NAME }}-${{ matrix.suffix }}${{ matrix.ext }} || true

      # 打包二进制文件为 artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.suffix }}
          path: ${{ env.BINARY_NAME }}-${{ matrix.suffix }}${{ matrix.ext }}
          retention-days: 7

  # 创建 GitHub Release（仅在推送标签时触发）
  release:
    name: Create GitHub Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') # 仅在推送标签时运行
    runs-on: ubuntu-latest
    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 下载所有编译好的 artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 创建 Release 并上传 artifacts
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}