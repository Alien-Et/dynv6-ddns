name: 交叉编译和发布

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: 编译和打包
    runs-on: ubuntu-latest

    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 设置 Go 环境
      - name: 设置 Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2' # 与 go.mod 中指定的版本一致
        env:
          GO111MODULE: on

      # 安装交叉编译工具链
      - name: 安装交叉编译工具链
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf gcc-mingw-w64

      # 编译所有平台的二进制文件
      - name: 交叉编译
        env:
          CGO_ENABLED: 1 # 启用 CGO，因为 go-sqlite3 需要
        run: |
          # 定义输出目录
          mkdir -p build

          # Linux AMD64
          echo "正在编译 Linux AMD64..."
          GOOS=linux GOARCH=amd64 go build -o build/dynv6-linux-amd64

          # Linux ARM64
          echo "正在编译 Linux ARM64..."
          GOOS=linux GOARCH=arm64 CC=aarch64-linux-gnu-gcc go build -o build/dynv6-linux-arm64

          # Linux ARM (32-bit)
          echo "正在编译 Linux ARM..."
          GOOS=linux GOARCH=arm CC=arm-linux-gnueabihf-gcc go build -o build/dynv6-linux-arm

          # Windows AMD64
          echo "正在编译 Windows AMD64..."
          GOOS=windows GOARCH=amd64 CC=x86_64-w64-mingw32-gcc go build -o build/dynv6-windows-amd64.exe

          # Windows ARM64
          echo "正在编译 Windows ARM64..."
          GOOS=windows GOARCH=arm64 CC=aarch64-w64-mingw32-gcc go build -o build/dynv6-windows-arm64.exe

          # macOS AMD64
          echo "正在编译 macOS AMD64..."
          GOOS=darwin GOARCH=amd64 go build -o build/dynv6-darwin-amd64

          # macOS ARM64
          echo "正在编译 macOS ARM64..."
          GOOS=darwin GOARCH=arm64 go build -o build/dynv6-darwin-arm64

          # Android ARM64
          echo "正在编译 Android ARM64..."
          GOOS=android GOARCH=arm64 CC=aarch64-linux-gnu-gcc go build -o build/dynv6-android-arm64

          # Android ARM (32-bit)
          echo "正在编译 Android ARM..."
          GOOS=android GOARCH=arm CC=arm-linux-gnueabihf-gcc go build -o build/dynv6-android-arm

      # 打包静态文件
      - name: 打包静态文件
        run: |
          mkdir -p build/static
          cp -r static/* build/static/

      # 创建发布包
      - name: 创建发布包
        run: |
          cd build
          # 为每个平台创建压缩包
          tar -czf dynv6-linux-amd64.tar.gz dynv6-linux-amd64 static
          tar -czf dynv6-linux-arm64.tar.gz dynv6-linux-arm64 static
          tar -czf dynv6-linux-arm.tar.gz dynv6-linux-arm static
          zip -r dynv6-windows-amd64.zip dynv6-windows-amd64.exe static
          zip -r dynv6-windows-arm64.zip dynv6-windows-arm64.exe static
          tar -czf dynv6-darwin-amd64.tar.gz dynv6-darwin-amd64 static
          tar -czf dynv6-darwin-arm64.tar.gz dynv6-darwin-arm64 static
          tar -czf dynv6-android-arm64.tar.gz dynv6-android-arm64 static
          tar -czf dynv6-android-arm.tar.gz dynv6-android-arm static

      # 上传编译产物
      - name: 上传编译产物
        uses: actions/upload-artifact@v4
        with:
          name: dynv6-binaries
          path: build/*.tar.gz
          retention-days: 5

      # 上传 Windows ZIP 文件
      - name: 上传 Windows ZIP 文件
        uses: actions/upload-artifact@v4
        with:
          name: dynv6-windows-binaries
          path: build/*.zip
          retention-days: 5

      # 在发布时创建 GitHub Release
      - name: 创建 GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            build/*.tar.gz
            build/*.zip
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}