name: Build Cross-Platform Binaries

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:

jobs:
  build:
    name: 构建 ${{ matrix.target.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux 64-bit
          - os: ubuntu-latest
            target:
              name: linux-amd64
              goos: linux
              goarch: amd64
              ext: ""
          # Linux 32-bit
          - os: ubuntu-latest
            target:
              name: linux-i386
              goos: linux
              goarch: 386
              ext: ""
          # Windows 64-bit
          - os: windows-2022  # 使用 windows-2022 提高稳定性
            target:
              name: windows-amd64
              goos: windows
              goarch: amd64
              ext: ".exe"
          # Windows 32-bit
          - os: windows-2022
            target:
              name: windows-i386
              goos: windows
              goarch: 386
              ext: ".exe"
          # macOS 64-bit
          - os: macos-latest
            target:
              name: macos-amd64
              goos: darwin
              goarch: amd64
              ext: ""
          # macOS ARM64 (M1/M2)
          - os: macos-latest
            target:
              name: macos-arm64
              goos: darwin
              goarch: arm64
              ext: ""
          # Android ARM 32-bit
          - os: ubuntu-latest
            target:
              name: android-arm
              goos: android
              goarch: arm
              ext: ""
              ndk_target: armv7a-linux-androideabi
              api_level: 21
          # Android ARM 64-bit
          - os: ubuntu-latest
            target:
              name: android-arm64
              goos: android
              goarch: arm64
              ext: ""
              ndk_target: aarch64-linux-android
              api_level: 21

    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 缓存 Go 模块
      - name: 缓存 Go 模块
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.mod', '**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # 设置 Go 环境（修复后：指定官方源 + 国内代理）
      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'
          distribution: 'official'  # 使用官方发行版
        env:
          GOPROXY: https://goproxy.cn,direct  # 国内镜像加速
        continue-on-error: true  # 允许下载失败继续

      # 为 Windows 安装 MinGW（调整顺序到设置Go之后）
      - name: 为 Windows 安装 MinGW
        if: contains(matrix.target.goos, 'windows')
        run: choco install mingw --force
        shell: powershell

      # 为 Android 构建安装 NDK
      - name: 设置 Android NDK
        if: contains(matrix.target.goos, 'android')
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d
        id: setup-ndk

      # 调试 NDK 工具链路径（可选，保留用于排查）
      - name: 调试 NDK 工具链路径
        if: contains(matrix.target.goos, 'android')
        run: |
          echo "NDK Path: ${{ steps.setup-ndk.outputs.ndk-path }}"
          ls -R ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin

      # 运行测试（显式控制CGO）
      - name: 运行测试
        env:
          CGO_ENABLED: ${{ contains(matrix.target.goos, 'android') || contains(matrix.target.goos, 'windows') && '1' || '0' }}
          CC: ${{ contains(matrix.target.goos, 'android') && format('{0}/toolchains/llvm/prebuilt/linux-x86_64/bin/{1}{2}-clang', steps.setup-ndk.outputs.ndk-path, matrix.target.ndk_target, matrix.target.api_level) || contains(matrix.target.goos, 'windows') && 'x86_64-w64-mingw32-gcc' || '' }}
        run: go test ./... -v
        continue-on-error: true  # 允许测试失败

      # 构建二进制文件（强制启用CGO for Android/Windows）
      - name: 构建二进制文件
        env:
          GOOS: ${{ matrix.target.goos }}
          GOARCH: ${{ matrix.target.goarch }}
          CGO_ENABLED: "1"  # 强制启用CGO（关键修复点）
          CC: ${{ contains(matrix.target.goos, 'android') && format('{0}/toolchains/llvm/prebuilt/linux-x86_64/bin/{1}{2}-clang', steps.setup-ndk.outputs.ndk-path, matrix.target.ndk_target, matrix.target.api_level) || contains(matrix.target.goos, 'windows') && 'x86_64-w64-mingw32-gcc' || '' }}
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          go build -o dynv6${{ matrix.target.ext }} -ldflags "-s -w" .

      # 打包二进制文件和静态文件
      - name: 打包二进制文件
        run: |
          BINARY_NAME="dynv6-${{ matrix.target.name }}${{ matrix.target.ext }}"
          mv dynv6${{ matrix.target.ext }} $BINARY_NAME
          if [ "${{ matrix.target.goos }}" = "windows" ]; then
            powershell -Command "Compress-Archive -Path $BINARY_NAME,static -DestinationPath $BINARY_NAME.zip -Force"
            echo "ASSET=$BINARY_NAME.zip" | tee -a $GITHUB_ENV
          else
            tar -czf $BINARY_NAME.tar.gz $BINARY_NAME static/
            echo "ASSET=$BINARY_NAME.tar.gz" | tee -a $GITHUB_ENV
          fi

      # 上传构建产物
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: dynv6-${{ matrix.target.name }}
          path: ${{ env.ASSET }}

  release:
    name: 创建发布
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 下载所有构建产物
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 创建 GitHub Release 并上传产物
      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/dynv6-*/dynv6-*.tar.gz
            artifacts/dynv6-*/dynv6-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
