name: Release Build

on:
  push:
    tags:
      - 'v*' # 触发版本标签 (如 v1.0.0)

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: 
          - { os: windows, arch: 386, ext: .exe, target: windows-32 }
          - { os: windows, arch: amd64, ext: .exe, target: windows-64 }
          - { os: linux, arch: 386, ext: , target: linux-32 }
          - { os: linux, arch: amd64, ext: , target: linux-64 }
          - { os: linux, arch: arm, ext: , target: linux-arm }
          - { os: linux, arch: arm64, ext: , target: linux-arm64 }
          - { os: darwin, arch: amd64, ext: , target: macos-amd64 }
          - { os: darwin, arch: arm64, ext: , target: macos-arm64 }
          - { os: android, arch: arm, ext: , target: android-arm }
          - { os: android, arch: arm64, ext: , target: android-arm64 }

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21'

      - name: Set up Android NDK (for Android builds)
        if: startsWith(matrix.platform.target, 'android')
        uses: android-actions/setup-android-ndk@v1
        with:
          ndk-version: '25.1.8937393'

      - name: Build
        env:
          GOOS: ${{ matrix.platform.os }}
          GOARCH: ${{ matrix.platform.arch }}
          CGO_ENABLED: ${{ startsWith(matrix.platform.target, 'android') && '0' || '1' }}
          # Android specific env vars
          CC: ${{ startsWith(matrix.platform.target, 'android') && format('{0}/toolchains/llvm/prebuilt/linux-x86_64/bin/{1}21-clang', env.ANDROID_NDK_HOME, matrix.platform.arch == 'arm' && 'armv7a-linux-androideabi' || 'aarch64-linux-android') || '' }}
          CXX: ${{ startsWith(matrix.platform.target, 'android') && format('{0}/toolchains/llvm/prebuilt/linux-x86_64/bin/{1}21-clang++', env.ANDROID_NDK_HOME, matrix.platform.arch == 'arm' && 'armv7a-linux-androideabi' || 'aarch64-linux-android') || '' }}
        run: |
          # 创建输出目录
          mkdir -p release/${{ matrix.platform.target }}
          
          # 构建主程序
          output_name="dynv6-ddns${{ matrix.platform.ext }}"
          go build -ldflags="-s -w" -o $output_name .
          
          # 复制静态文件
          cp -r static release/${{ matrix.platform.target }}/
          
          # 移动二进制文件
          mv $output_name release/${{ matrix.platform.target }}/dynv6-ddns${{ matrix.platform.ext }}
          
          # 创建压缩包
          cd release && tar -czf ${{ matrix.platform.target }}.tar.gz ${{ matrix.platform.target }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dynv6-ddns-${{ matrix.platform.target }}
          path: release/${{ matrix.platform.target }}.tar.gz

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          body: |
            Dynv6 DDNS Updater - 多平台构建
            
            ### 支持平台:
            - Windows (32/64位)
            - Linux (32/64位, ARM/ARM64)
            - macOS (Intel/Apple Silicon)
            - Android (ARM/ARM64)
          files: |
            artifacts/**/*.tar.gz
