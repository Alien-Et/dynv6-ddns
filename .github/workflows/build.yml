name: Build Cross-Platform Binaries

# 触发条件：推送到 main 分支或创建标签
on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:

jobs:
  build:
    name: Build for ${{ matrix.target.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux 64-bit
          - os: ubuntu-latest
            target:
              name: linux-amd64
              goos: linux
              goarch: amd64
              ext: ""
          # Linux 32-bit
          - os: ubuntu-latest
            target:
              name: linux-i386
              goos: linux
              goarch: 386
              ext: ""
          # Windows 64-bit
          - os: windows-latest
            target:
              name: windows-amd64
              goos: windows
              goarch: amd64
              ext: ".exe"
          # Windows 32-bit
          - os: windows-latest
            target:
              name: windows-i386
              goos: windows
              goarch: 386
              ext: ".exe"
          # macOS 64-bit
          - os: macos-latest
            target:
              name: macos-amd64
              goos: darwin
              goarch: amd64
              ext: ""
          # macOS ARM64 (M1/M2)
          - os: macos-latest
            target:
              name: macos-arm64
              goos: darwin
              goarch: arm64
              ext: ""
          # Android ARM 32-bit
          - os: ubuntu-latest
            target:
              name: android-arm
              goos: android
              goarch: arm
              ext: ""
          # Android ARM 64-bit
          - os: ubuntu-latest
            target:
              name: android-arm64
              goos: android
              goarch: arm64
              ext: ""

    steps:
      # 检出代码
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 设置 Go 环境
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # 为 Android 构建安装 NDK
      - name: Setup Android NDK
        if: contains(matrix.target.goos, 'android')
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d
        id: setup-ndk

      # 安装 cross 工具用于 Android 构建
      - name: Install Cross for Android
        if: contains(matrix.target.goos, 'android')
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
          cargo binstall --no-confirm cross

      # 构建二进制文件
      - name: Build Binary
        env:
          GOOS: ${{ matrix.target.goos }}
          GOARCH: ${{ matrix.target.goarch }}
          CGO_ENABLED: 0
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          if [ "${{ matrix.target.goos }}" = "android" ]; then
            cross build --release --target ${{ matrix.target.goos == 'android' && matrix.target.goarch == 'arm' && 'arm-linux-androideabi' || 'aarch64-linux-android' }}
          else
            go build -o dynv6${{ matrix.target.ext }} -ldflags "-s -w" .
          fi

      # 打包二进制文件
      - name: Package Binary
        run: |
          BINARY_NAME="dynv6-${{ matrix.target.name }}${{ matrix.target.ext }}"
          mv dynv6${{ matrix.target.ext }} $BINARY_NAME
          if [ "${{ matrix.target.goos }}" = "windows" ]; then
            7z a $BINARY_NAME.zip $BINARY_NAME
            echo "ASSET=$BINARY_NAME.zip" >> $GITHUB_ENV
          else
            tar -czf $BINARY_NAME.tar.gz $BINARY_NAME
            echo "ASSET=$BINARY_NAME.tar.gz" >> $GITHUB_ENV
          fi

      # 上传构建产物
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dynv6-${{ matrix.target.name }}
          path: ${{ env.ASSET }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      # 检出代码
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 下载所有构建产物
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 创建 GitHub Release 并上传产物
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/dynv6-*/dynv6-*.tar.gz
            artifacts/dynv6-*/dynv6-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}